[1mdiff --git a/A_star_c0322.cpp b/A_star_c0322.cpp[m
[1mindex 3ebb8eb..99e4697 100644[m
[1m--- a/A_star_c0322.cpp[m
[1m+++ b/A_star_c0322.cpp[m
[36m@@ -98,7 +98,7 @@[m [mstruct  stack//提示：我已在结构体定义结束处申请了open列表，[m
 [m
 	}[m
 	//将一个节点加入栈中[m
[31m-	int push(point n,stack *F = NULL)//F为父节点默认为空，这只是习惯问题，[m
[32m+[m	[32mint push(point n,stack *F = NULL)//F为父节点默认为空，这只是习惯问题//插入头结点之后[m
 	{[m
 		stack * p  = (stack *)malloc(sizeof(stack));//申请一个结构体空间[m
 		stack *q = NULL;[m
[36m@@ -218,13 +218,14 @@[m [mstruct  stack//提示：我已在结构体定义结束处申请了open列表，[m
 				return 1;[m
 			}[m
 			for (int x = 0;x<4;x++)//分别扫描四个方向[m
[31m-			{   n.x =p->data.x;[m
[31m-			n.y =p->data.y;[m
[31m-			n= next_point(n,x);//根据x指示的方向得到下一个扫描点的坐标[m
[31m-			if (MAP[n.x][n.y]==0&&!find_point(n)&&!close.find_point(n))//当前坐标n不在开启列表，关闭列表，且为0[m
[31m-			{[m
[31m-				open.push(n,p);//加入开启列表[m
[31m-			}[m
[32m+[m			[32m{[m[41m   [m
[32m+[m				[32mn.x =p->data.x;[m
[32m+[m				[32mn.y =p->data.y;[m
[32m+[m				[32mn= next_point(n,x);//根据x指示的方向得到下一个扫描点的坐标[m
[32m+[m				[32mif (MAP[n.x][n.y]==0&&!find_point(n)&&!close.find_point(n))//当前坐标n不在开启列表，关闭列表，且为0[m
[32m+[m				[32m{[m
[32m+[m					[32mopen.push(n,p);//加入开启列表[m
[32m+[m				[32m}[m
 			}[m
 			n.x = p->data.x;//将n的坐标还原为父节点[m
 			n.y = p->data.y;[m
